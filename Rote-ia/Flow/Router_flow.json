{"name": "Router_flow", "description": "Generate, Innovate, Communicate.", "icon": null, "is_component": false, "endpoint_name": null, "data": {"nodes": [{"id": "RouteComponent-PZmK8", "type": "genericNode", "position": {"x": 431, "y": 385.96868350379555}, "data": {"type": "RouteComponent", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\n\r\nclass RouteComponent(Component):\r\n    display_name = \"Route\"\r\n    description = \"Defines a route with a name and example phrases.\"\r\n    icon = \"\u2b06\ufe0f\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"route_name\", \r\n            display_name=\"Route Name\", \r\n            info=\"Name of the route.\"\r\n        ),\r\n        MessageTextInput(\r\n            name=\"example_phrases\", \r\n            display_name=\"Example Phrases\", \r\n            info=\"Example phrases for the route.\", \r\n            is_list=True\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Data\", name=\"route_data\", method=\"get_route_data\"),\r\n    ]\r\n\r\n    def get_route_data(self) -> Data:\r\n        # Acessa os inputs\r\n        route_name = self.route_name\r\n        example_phrases = self.example_phrases\r\n\r\n        # Retorna os dados como Data\r\n        return Data(data={\r\n            \"route_name\": route_name,\r\n            \"example_phrases\": example_phrases\r\n        })\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "example_phrases": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "required": false, "placeholder": "", "show": true, "name": "example_phrases", "value": ["problemas com internet", "reiniciar roteador", "problemas com Wi-Fi", "conex\u00e3o lenta", "sem conex\u00e3o", "roteador piscando", "cabo desconectado", "internet cai", "n\u00e3o consegue conectar", "senha do Wi-Fi", "rede n\u00e3o aparece", "sinal fraco", "problemas com IPv6", "problemas com VPN", "DNS n\u00e3o responde", "suporte t\u00e9cnico"], "display_name": "Example Phrases", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Example phrases for the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "route_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "route_name", "value": "Suporte", "display_name": "Route Name", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Name of the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Defines a route with a name and example phrases.", "icon": "\u2b06\ufe0f", "base_classes": ["Data"], "display_name": "Bloxplot_Route", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "route_data", "display_name": "Route Data", "method": "get_route_data", "value": "__UNDEFINED__", "cache": true}], "field_order": ["route_name", "example_phrases"], "beta": false, "edited": true, "official": false, "lf_version": "1.0.16"}, "id": "RouteComponent-PZmK8"}, "selected": false, "width": 384, "height": 1154}, {"id": "RouterComponent-JD2ay", "type": "genericNode", "position": {"x": 1815.86978717674, "y": 1352.336924381239}, "data": {"type": "RouterComponent", "node": {"template": {"_type": "Component", "routes_data": {"trace_as_metadata": true, "list": true, "trace_as_input": true, "required": false, "placeholder": "", "show": true, "name": "routes_data", "value": "", "display_name": "Routes Data", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "Data from Route components.", "title_case": false, "type": "other", "_input_type": "DataInput"}, "aggregation_method": {"trace_as_metadata": true, "options": ["mean", "max", "min"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "aggregation_method", "value": "max", "display_name": "Aggregation Method", "advanced": false, "dynamic": false, "info": "Method to aggregate similarity scores.", "title_case": false, "type": "str", "_input_type": "DropdownInput", "load_from_db": false}, "api_key": {"load_from_db": true, "required": false, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "OpenAI API Key", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\r\nfrom langflow.io import DataInput, MessageTextInput, SecretStrInput, DropdownInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema import Data\r\nfrom semantic_router import Route\r\nfrom semantic_router.encoders import OpenAIEncoder\r\nfrom semantic_router.layer import RouteLayer\r\n\r\nclass RouterComponent(Component):\r\n    display_name = \"Router Component\"\r\n    description = \"Classifies an input phrase based on similarity to defined concepts.\"\r\n    icon = \"\ud83d\udd00\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"routes_data\", \r\n            display_name=\"Routes Data\", \r\n            info=\"Data from Route components.\", \r\n            is_list=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"aggregation_method\", \r\n            display_name=\"Aggregation Method\", \r\n            options=[\"mean\", \"max\", \"min\"], \r\n            info=\"Method to aggregate similarity scores.\"\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"OPENAI_API_KEY\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Route\", \r\n            name=\"route_output\", \r\n            method=\"build_route\"\r\n        ),\r\n    ]\r\n\r\n    def build_route(self) -> Message:\r\n        # Construa os objetos Route usando os dados de entrada\r\n        routes = [\r\n            Route(name=route_data.data['route_name'], utterances=route_data.data['example_phrases'])\r\n            for route_data in self.routes_data\r\n        ]\r\n        \r\n        encoder = OpenAIEncoder(\r\n            openai_api_key=self.api_key\r\n        )\r\n        \r\n        route_layer = RouteLayer(\r\n            encoder=encoder, \r\n            routes=routes, \r\n            aggregation=self.aggregation_method\r\n        )\r\n        \r\n        message = Message(text=route_layer(self.input_text).name)\r\n        self.status = message\r\n        return message\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_text": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_text", "value": "", "display_name": "Input Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The primary text input for the operation.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Classifies an input phrase based on similarity to defined concepts.", "icon": "\ud83d\udd00", "base_classes": ["Message"], "display_name": "Bloxplot_Router", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "route_output", "display_name": "Route", "method": "build_route", "value": "__UNDEFINED__", "cache": true}], "field_order": ["routes_data", "input_text", "aggregation_method", "api_key"], "beta": false, "edited": true}, "id": "RouterComponent-JD2ay"}, "selected": true, "width": 384, "height": 541, "positionAbsolute": {"x": 1815.86978717674, "y": 1352.336924381239}, "dragging": false}, {"id": "RouteComponent-CEVPz", "type": "genericNode", "position": {"x": 873.0649645954032, "y": 384.55869106977366}, "data": {"type": "RouteComponent", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\n\r\nclass RouteComponent(Component):\r\n    display_name = \"Route\"\r\n    description = \"Defines a route with a name and example phrases.\"\r\n    icon = \"\u2b06\ufe0f\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"route_name\", \r\n            display_name=\"Route Name\", \r\n            info=\"Name of the route.\"\r\n        ),\r\n        MessageTextInput(\r\n            name=\"example_phrases\", \r\n            display_name=\"Example Phrases\", \r\n            info=\"Example phrases for the route.\", \r\n            is_list=True\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Data\", name=\"route_data\", method=\"get_route_data\"),\r\n    ]\r\n\r\n    def get_route_data(self) -> Data:\r\n        # Acessa os inputs\r\n        route_name = self.route_name\r\n        example_phrases = self.example_phrases\r\n\r\n        # Retorna os dados como Data\r\n        return Data(data={\r\n            \"route_name\": route_name,\r\n            \"example_phrases\": example_phrases\r\n        })\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "example_phrases": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "required": false, "placeholder": "", "show": true, "name": "example_phrases", "value": ["consultar fatura", "segunda via", "verificar pagamento", "fatura atrasada", "negociar d\u00edvida", "parcelamento", "data de vencimento", "n\u00e3o recebi a fatura", "valor da fatura", "pagamento duplicado", "extrato detalhado", "fatura digital", "alterar forma de pagamento", "cancelar d\u00e9bito autom\u00e1tico", "mudar dia de vencimento"], "display_name": "Example Phrases", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Example phrases for the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "route_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "route_name", "value": "Financeiro", "display_name": "Route Name", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Name of the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Defines a route with a name and example phrases.", "icon": "\u2b06\ufe0f", "base_classes": ["Data"], "display_name": "Bloxplot_Route", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "route_data", "display_name": "Route Data", "method": "get_route_data", "value": "__UNDEFINED__", "cache": true}], "field_order": ["route_name", "example_phrases"], "beta": false, "edited": true, "official": false, "lf_version": "1.0.16"}, "id": "RouteComponent-CEVPz"}, "selected": false, "width": 384, "height": 1104}, {"id": "RouteComponent-rrPhx", "type": "genericNode", "position": {"x": 1288.2949289219168, "y": 377.609375}, "data": {"type": "RouteComponent", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\n\r\nclass RouteComponent(Component):\r\n    display_name = \"Route\"\r\n    description = \"Defines a route with a name and example phrases.\"\r\n    icon = \"\u2b06\ufe0f\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"route_name\", \r\n            display_name=\"Route Name\", \r\n            info=\"Name of the route.\"\r\n        ),\r\n        MessageTextInput(\r\n            name=\"example_phrases\", \r\n            display_name=\"Example Phrases\", \r\n            info=\"Example phrases for the route.\", \r\n            is_list=True\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Data\", name=\"route_data\", method=\"get_route_data\"),\r\n    ]\r\n\r\n    def get_route_data(self) -> Data:\r\n        # Acessa os inputs\r\n        route_name = self.route_name\r\n        example_phrases = self.example_phrases\r\n\r\n        # Retorna os dados como Data\r\n        return Data(data={\r\n            \"route_name\": route_name,\r\n            \"example_phrases\": example_phrases\r\n        })\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "example_phrases": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "required": false, "placeholder": "", "show": true, "name": "example_phrases", "value": ["informa\u00e7\u00f5es sobre planos", "mudan\u00e7a de plano", "upgrade de plano", "inclus\u00e3o de servi\u00e7o", "promo\u00e7\u00f5es", "alterar velocidade", "alterar endere\u00e7o", "atualiza\u00e7\u00e3o de dados cadastrais", "cancelar plano", "recuperar senha", "hor\u00e1rio de atendimento", "endere\u00e7o da loja", "atendimento presencial", "plano de dados moveis", "agendar visita t\u00e9cnica"], "display_name": "Example Phrases", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Example phrases for the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "route_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "route_name", "value": "Comercial", "display_name": "Route Name", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Name of the route.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Defines a route with a name and example phrases.", "icon": "\u2b06\ufe0f", "base_classes": ["Data"], "display_name": "Bloxplot_Route", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "route_data", "display_name": "Route Data", "method": "get_route_data", "value": "__UNDEFINED__", "cache": true}], "field_order": ["route_name", "example_phrases"], "beta": false, "edited": true, "official": false, "lf_version": "1.0.16"}, "id": "RouteComponent-rrPhx"}, "selected": false, "width": 384, "height": 1104}, {"id": "ChatInput-5I0Rw", "type": "genericNode", "position": {"x": 1171.6596008314839, "y": 1586.9423032207374}, "data": {"type": "ChatInput", "node": {"template": {"_type": "Component", "files": {"trace_as_metadata": true, "file_path": "", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "list": true, "required": false, "placeholder": "", "show": true, "name": "files", "value": "", "display_name": "Files", "advanced": true, "dynamic": false, "info": "Files to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "Gostaria de antecipar o meu suporte t\u00e9cnico para amanh\u00e3", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Message to be passed as input.", "title_case": false, "type": "str", "_input_type": "MultilineInput"}, "sender": {"trace_as_metadata": true, "options": ["Machine", "User"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "User", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "User", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Get chat inputs from the Playground.", "icon": "ChatInput", "base_classes": ["Message"], "display_name": "Chat Input", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "files"], "beta": false, "edited": false, "lf_version": "1.0.16"}, "id": "ChatInput-5I0Rw"}, "selected": false, "width": 384, "height": 297, "positionAbsolute": {"x": 1171.6596008314839, "y": 1586.9423032207374}, "dragging": false}, {"id": "ChatOutput-5POsw", "type": "genericNode", "position": {"x": 2422.5531002441876, "y": 1502.493796931272}, "data": {"type": "ChatOutput", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "data_template": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "data_template", "value": "{text}", "display_name": "Data Template", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "input_value": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Message to be passed as output.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "sender": {"trace_as_metadata": true, "options": ["Machine", "User"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "Machine", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "AI", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Display a chat message in the Playground.", "icon": "ChatOutput", "base_classes": ["Message"], "display_name": "Chat Output", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template"], "beta": false, "edited": false, "lf_version": "1.0.16"}, "id": "ChatOutput-5POsw"}, "selected": false, "width": 384, "height": 297}], "edges": [{"source": "RouteComponent-rrPhx", "sourceHandle": "{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-rrPhx\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "RouterComponent-JD2ay", "targetHandle": "{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "routes_data", "id": "RouterComponent-JD2ay", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "RouteComponent", "id": "RouteComponent-rrPhx", "name": "route_data", "output_types": ["Data"]}}, "id": "reactflow__edge-RouteComponent-rrPhx{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-rrPhx\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-RouterComponent-JD2ay{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "RouteComponent-CEVPz", "sourceHandle": "{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-CEVPz\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "RouterComponent-JD2ay", "targetHandle": "{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "routes_data", "id": "RouterComponent-JD2ay", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "RouteComponent", "id": "RouteComponent-CEVPz", "name": "route_data", "output_types": ["Data"]}}, "id": "reactflow__edge-RouteComponent-CEVPz{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-CEVPz\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-RouterComponent-JD2ay{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "RouteComponent-PZmK8", "sourceHandle": "{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-PZmK8\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "RouterComponent-JD2ay", "targetHandle": "{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "routes_data", "id": "RouterComponent-JD2ay", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "RouteComponent", "id": "RouteComponent-PZmK8", "name": "route_data", "output_types": ["Data"]}}, "id": "reactflow__edge-RouteComponent-PZmK8{\u0153dataType\u0153:\u0153RouteComponent\u0153,\u0153id\u0153:\u0153RouteComponent-PZmK8\u0153,\u0153name\u0153:\u0153route_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-RouterComponent-JD2ay{\u0153fieldName\u0153:\u0153routes_data\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "ChatInput-5I0Rw", "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-5I0Rw\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "RouterComponent-JD2ay", "targetHandle": "{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_text", "id": "RouterComponent-JD2ay", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ChatInput", "id": "ChatInput-5I0Rw", "name": "message", "output_types": ["Message"]}}, "id": "reactflow__edge-ChatInput-5I0Rw{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-5I0Rw\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-RouterComponent-JD2ay{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "RouterComponent-JD2ay", "sourceHandle": "{\u0153dataType\u0153:\u0153RouterComponent\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153name\u0153:\u0153route_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-5POsw", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-5POsw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "ChatOutput-5POsw", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "RouterComponent", "id": "RouterComponent-JD2ay", "name": "route_output", "output_types": ["Message"]}}, "id": "reactflow__edge-RouterComponent-JD2ay{\u0153dataType\u0153:\u0153RouterComponent\u0153,\u0153id\u0153:\u0153RouterComponent-JD2ay\u0153,\u0153name\u0153:\u0153route_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-5POsw{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-5POsw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}], "viewport": {"x": 15.847232956081825, "y": -65.90002831635385, "zoom": 0.26786575425722947}}, "user_id": "9f3306fe-0011-43cf-8159-1d46ee55b16e", "folder_id": "453952ee-c984-4d19-98cd-a71160f9f9f5", "icon_bg_color": null, "updated_at": "2024-09-08T22:55:11+00:00", "webhook": false, "id": "959dd205-d2c1-41d3-8ab3-907c224e5953"}