[{"id":"rete_ia","user_id":"316ef53f-d166-4e90-8ca0-1ad1664ad074","name":"Rote.ia","type":"pipe","content":"from pydantic import BaseModel, Field\nfrom typing import Union, Generator, Iterator\nimport aiohttp\nimport asyncio\nimport json\n\n\nclass Pipe:\n    class Valves(BaseModel):\n        endpoint_name: str = Field(default=\"\", description=\"Nome do endpoint da API.\")\n        langflow_api_key: str = Field(\n            default=\"\",\n            description=\"Chave da API do Langflow.\",\n        )\n        stream_option: bool = Field(default=False, description=\"Opção de stream\")\n\n    def __init__(self):\n        self.type = \"manifold\"\n        self.valves = self.Valves()\n        self.base_url = \"http://langflow:7860/api/v1/run/\"\n        self.chat_id = None\n\n    def pipes(self):\n        return [\n            {\n                \"id\": self.valves.endpoint_name,\n                \"name\": \"Rote.ia\",\n            },\n        ]\n\n    def create_session_id(self, first_message: str) -> str:\n        words = first_message.split()\n        if len(words) == 1:\n            return f\"{words[0][0]}...{words[0][-1]}\"\n        else:\n            return f\"{words[0]}...{words[-1]}\"\n\n    async def pipe(self, body: dict, __user__: dict) -> Union[str, Generator, Iterator]:\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": self.valves.langflow_api_key,\n        }\n        first_user_message = None\n\n        messages = body.get(\"messages\", [])\n        input_value = messages[-1][\"content\"] if messages else \"\"\n\n        if first_user_message:\n            session_id = self.create_session_id(first_user_message)\n        else:\n            session_id = \"session_id_default\"\n\n        payload = {\n            \"input_value\": f'{{\"input\": \"{input_value}\", \"email\": \"{__user__[\"email\"]}\"}}',\n            \"session_id\": f'{__user__[\"name\"]}-{session_id}',\n        }\n\n        api_url = f\"{self.base_url}{self.valves.endpoint_name}?stream={self.valves.stream_option}\"\n\n        async with aiohttp.ClientSession() as session:\n            try:\n                async with session.post(\n                    api_url, headers=headers, json=payload\n                ) as response:\n                    response.raise_for_status()\n                    async for line in response.content:\n                        if line:\n                            try:\n                                data = json.loads(line.decode(\"utf-8\").strip())\n                                outputs = data.get(\"outputs\", [])\n                                if outputs:\n                                    results = outputs[0].get(\"outputs\", [])\n                                    if results:\n                                        message_data = (\n                                            results[0]\n                                            .get(\"results\", {})\n                                            .get(\"message\", {})\n                                            .get(\"data\", {})\n                                        )\n                                        text = message_data.get(\"text\", None)\n                                        if text:\n                                            yield text\n                                        else:\n                                            yield \"Nenhum texto encontrado.\"\n                                    else:\n                                        yield \"Nenhum 'results' encontrado na resposta da API.\"\n                                else:\n                                    yield \"Nenhum 'outputs' encontrado na resposta da API.\"\n                            except json.JSONDecodeError:\n                                yield \"Erro ao decodificar a resposta da API.\"\n            except aiohttp.ClientResponseError as e:\n                yield f\"Erro na resposta da API: {e.status} - {e.message}\"\n            except aiohttp.ClientConnectionError:\n                yield \"Erro de conexão com a API.\"\n            except Exception as e:\n                yield f\"Ocorreu um erro: {e}\"\n","meta":{"description":"Rote.ia","manifest":{}},"is_active":true,"is_global":false,"updated_at":1725835102,"created_at":1725835060}]